// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/30/2022 13:44:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    singleCycleProc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module singleCycleProc_vlg_sample_tst(
	GClock,
	GReset,
	ValueSelect,
	sampler_tx
);
input  GClock;
input  GReset;
input [2:0] ValueSelect;
output sampler_tx;

reg sample;
time current_time;
always @(GClock or GReset or ValueSelect)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module singleCycleProc_vlg_check_tst (
	BranchOut,
	DataMemOut,
	InstructionOut,
	MemWriteOut,
	MuxOut,
	Operation,
	RegDstD1,
	RegDstD2,
	RegWriteOut,
	WriteRegAdd,
	ZeroOut,
	sampler_rx
);
input  BranchOut;
input [7:0] DataMemOut;
input [31:0] InstructionOut;
input  MemWriteOut;
input [7:0] MuxOut;
input [2:0] Operation;
input [7:0] RegDstD1;
input [7:0] RegDstD2;
input  RegWriteOut;
input [4:0] WriteRegAdd;
input  ZeroOut;
input sampler_rx;

reg  BranchOut_expected;
reg [7:0] DataMemOut_expected;
reg [31:0] InstructionOut_expected;
reg  MemWriteOut_expected;
reg [7:0] MuxOut_expected;
reg [2:0] Operation_expected;
reg [7:0] RegDstD1_expected;
reg [7:0] RegDstD2_expected;
reg  RegWriteOut_expected;
reg [4:0] WriteRegAdd_expected;
reg  ZeroOut_expected;

reg  BranchOut_prev;
reg [7:0] DataMemOut_prev;
reg [31:0] InstructionOut_prev;
reg  MemWriteOut_prev;
reg [7:0] MuxOut_prev;
reg [2:0] Operation_prev;
reg [7:0] RegDstD1_prev;
reg [7:0] RegDstD2_prev;
reg  RegWriteOut_prev;
reg [4:0] WriteRegAdd_prev;
reg  ZeroOut_prev;

reg  BranchOut_expected_prev;
reg [7:0] DataMemOut_expected_prev;
reg [31:0] InstructionOut_expected_prev;
reg  MemWriteOut_expected_prev;
reg [7:0] MuxOut_expected_prev;
reg [2:0] Operation_expected_prev;
reg [7:0] RegDstD1_expected_prev;
reg [7:0] RegDstD2_expected_prev;
reg  RegWriteOut_expected_prev;
reg [4:0] WriteRegAdd_expected_prev;
reg  ZeroOut_expected_prev;

reg  last_BranchOut_exp;
reg [7:0] last_DataMemOut_exp;
reg [31:0] last_InstructionOut_exp;
reg  last_MemWriteOut_exp;
reg [7:0] last_MuxOut_exp;
reg [2:0] last_Operation_exp;
reg [7:0] last_RegDstD1_exp;
reg [7:0] last_RegDstD2_exp;
reg  last_RegWriteOut_exp;
reg [4:0] last_WriteRegAdd_exp;
reg  last_ZeroOut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	BranchOut_prev = BranchOut;
	DataMemOut_prev = DataMemOut;
	InstructionOut_prev = InstructionOut;
	MemWriteOut_prev = MemWriteOut;
	MuxOut_prev = MuxOut;
	Operation_prev = Operation;
	RegDstD1_prev = RegDstD1;
	RegDstD2_prev = RegDstD2;
	RegWriteOut_prev = RegWriteOut;
	WriteRegAdd_prev = WriteRegAdd;
	ZeroOut_prev = ZeroOut;
end

// update expected /o prevs

always @(trigger)
begin
	BranchOut_expected_prev = BranchOut_expected;
	DataMemOut_expected_prev = DataMemOut_expected;
	InstructionOut_expected_prev = InstructionOut_expected;
	MemWriteOut_expected_prev = MemWriteOut_expected;
	MuxOut_expected_prev = MuxOut_expected;
	Operation_expected_prev = Operation_expected;
	RegDstD1_expected_prev = RegDstD1_expected;
	RegDstD2_expected_prev = RegDstD2_expected;
	RegWriteOut_expected_prev = RegWriteOut_expected;
	WriteRegAdd_expected_prev = WriteRegAdd_expected;
	ZeroOut_expected_prev = ZeroOut_expected;
end


// expected InstructionOut[ 31 ]
initial
begin
	InstructionOut_expected[31] = 1'bX;
end 
// expected InstructionOut[ 30 ]
initial
begin
	InstructionOut_expected[30] = 1'bX;
end 
// expected InstructionOut[ 29 ]
initial
begin
	InstructionOut_expected[29] = 1'bX;
end 
// expected InstructionOut[ 28 ]
initial
begin
	InstructionOut_expected[28] = 1'bX;
end 
// expected InstructionOut[ 27 ]
initial
begin
	InstructionOut_expected[27] = 1'bX;
end 
// expected InstructionOut[ 26 ]
initial
begin
	InstructionOut_expected[26] = 1'bX;
end 
// expected InstructionOut[ 25 ]
initial
begin
	InstructionOut_expected[25] = 1'bX;
end 
// expected InstructionOut[ 24 ]
initial
begin
	InstructionOut_expected[24] = 1'bX;
end 
// expected InstructionOut[ 23 ]
initial
begin
	InstructionOut_expected[23] = 1'bX;
end 
// expected InstructionOut[ 22 ]
initial
begin
	InstructionOut_expected[22] = 1'bX;
end 
// expected InstructionOut[ 21 ]
initial
begin
	InstructionOut_expected[21] = 1'bX;
end 
// expected InstructionOut[ 20 ]
initial
begin
	InstructionOut_expected[20] = 1'bX;
end 
// expected InstructionOut[ 19 ]
initial
begin
	InstructionOut_expected[19] = 1'bX;
end 
// expected InstructionOut[ 18 ]
initial
begin
	InstructionOut_expected[18] = 1'bX;
end 
// expected InstructionOut[ 17 ]
initial
begin
	InstructionOut_expected[17] = 1'bX;
end 
// expected InstructionOut[ 16 ]
initial
begin
	InstructionOut_expected[16] = 1'bX;
end 
// expected InstructionOut[ 15 ]
initial
begin
	InstructionOut_expected[15] = 1'bX;
end 
// expected InstructionOut[ 14 ]
initial
begin
	InstructionOut_expected[14] = 1'bX;
end 
// expected InstructionOut[ 13 ]
initial
begin
	InstructionOut_expected[13] = 1'bX;
end 
// expected InstructionOut[ 12 ]
initial
begin
	InstructionOut_expected[12] = 1'bX;
end 
// expected InstructionOut[ 11 ]
initial
begin
	InstructionOut_expected[11] = 1'bX;
end 
// expected InstructionOut[ 10 ]
initial
begin
	InstructionOut_expected[10] = 1'bX;
end 
// expected InstructionOut[ 9 ]
initial
begin
	InstructionOut_expected[9] = 1'bX;
end 
// expected InstructionOut[ 8 ]
initial
begin
	InstructionOut_expected[8] = 1'bX;
end 
// expected InstructionOut[ 7 ]
initial
begin
	InstructionOut_expected[7] = 1'bX;
end 
// expected InstructionOut[ 6 ]
initial
begin
	InstructionOut_expected[6] = 1'bX;
end 
// expected InstructionOut[ 5 ]
initial
begin
	InstructionOut_expected[5] = 1'bX;
end 
// expected InstructionOut[ 4 ]
initial
begin
	InstructionOut_expected[4] = 1'bX;
end 
// expected InstructionOut[ 3 ]
initial
begin
	InstructionOut_expected[3] = 1'bX;
end 
// expected InstructionOut[ 2 ]
initial
begin
	InstructionOut_expected[2] = 1'bX;
end 
// expected InstructionOut[ 1 ]
initial
begin
	InstructionOut_expected[1] = 1'bX;
end 
// expected InstructionOut[ 0 ]
initial
begin
	InstructionOut_expected[0] = 1'bX;
end 

// expected MemWriteOut
initial
begin
	MemWriteOut_expected = 1'bX;
end 

// expected BranchOut
initial
begin
	BranchOut_expected = 1'bX;
end 
// expected MuxOut[ 7 ]
initial
begin
	MuxOut_expected[7] = 1'bX;
end 
// expected MuxOut[ 6 ]
initial
begin
	MuxOut_expected[6] = 1'bX;
end 
// expected MuxOut[ 5 ]
initial
begin
	MuxOut_expected[5] = 1'bX;
end 
// expected MuxOut[ 4 ]
initial
begin
	MuxOut_expected[4] = 1'bX;
end 
// expected MuxOut[ 3 ]
initial
begin
	MuxOut_expected[3] = 1'bX;
end 
// expected MuxOut[ 2 ]
initial
begin
	MuxOut_expected[2] = 1'bX;
end 
// expected MuxOut[ 1 ]
initial
begin
	MuxOut_expected[1] = 1'bX;
end 
// expected MuxOut[ 0 ]
initial
begin
	MuxOut_expected[0] = 1'bX;
end 

// expected RegWriteOut
initial
begin
	RegWriteOut_expected = 1'bX;
end 

// expected ZeroOut
initial
begin
	ZeroOut_expected = 1'bX;
end 
// expected Operation[ 2 ]
initial
begin
	Operation_expected[2] = 1'bX;
end 
// expected Operation[ 1 ]
initial
begin
	Operation_expected[1] = 1'bX;
end 
// expected Operation[ 0 ]
initial
begin
	Operation_expected[0] = 1'bX;
end 
// expected DataMemOut[ 7 ]
initial
begin
	DataMemOut_expected[7] = 1'bX;
end 
// expected DataMemOut[ 6 ]
initial
begin
	DataMemOut_expected[6] = 1'bX;
end 
// expected DataMemOut[ 5 ]
initial
begin
	DataMemOut_expected[5] = 1'bX;
end 
// expected DataMemOut[ 4 ]
initial
begin
	DataMemOut_expected[4] = 1'bX;
end 
// expected DataMemOut[ 3 ]
initial
begin
	DataMemOut_expected[3] = 1'bX;
end 
// expected DataMemOut[ 2 ]
initial
begin
	DataMemOut_expected[2] = 1'bX;
end 
// expected DataMemOut[ 1 ]
initial
begin
	DataMemOut_expected[1] = 1'bX;
end 
// expected DataMemOut[ 0 ]
initial
begin
	DataMemOut_expected[0] = 1'bX;
end 

// expected WriteRegAdd[4]
initial
begin
	WriteRegAdd_expected[4] = 1'bX;
end 

// expected WriteRegAdd[3]
initial
begin
	WriteRegAdd_expected[3] = 1'bX;
end 

// expected WriteRegAdd[2]
initial
begin
	WriteRegAdd_expected[2] = 1'bX;
end 

// expected WriteRegAdd[1]
initial
begin
	WriteRegAdd_expected[1] = 1'bX;
end 

// expected WriteRegAdd[0]
initial
begin
	WriteRegAdd_expected[0] = 1'bX;
end 
// expected RegDstD1[ 7 ]
initial
begin
	RegDstD1_expected[7] = 1'bX;
end 
// expected RegDstD1[ 6 ]
initial
begin
	RegDstD1_expected[6] = 1'bX;
end 
// expected RegDstD1[ 5 ]
initial
begin
	RegDstD1_expected[5] = 1'bX;
end 
// expected RegDstD1[ 4 ]
initial
begin
	RegDstD1_expected[4] = 1'bX;
end 
// expected RegDstD1[ 3 ]
initial
begin
	RegDstD1_expected[3] = 1'bX;
end 
// expected RegDstD1[ 2 ]
initial
begin
	RegDstD1_expected[2] = 1'bX;
end 
// expected RegDstD1[ 1 ]
initial
begin
	RegDstD1_expected[1] = 1'bX;
end 
// expected RegDstD1[ 0 ]
initial
begin
	RegDstD1_expected[0] = 1'bX;
end 
// expected RegDstD2[ 7 ]
initial
begin
	RegDstD2_expected[7] = 1'bX;
end 
// expected RegDstD2[ 6 ]
initial
begin
	RegDstD2_expected[6] = 1'bX;
end 
// expected RegDstD2[ 5 ]
initial
begin
	RegDstD2_expected[5] = 1'bX;
end 
// expected RegDstD2[ 4 ]
initial
begin
	RegDstD2_expected[4] = 1'bX;
end 
// expected RegDstD2[ 3 ]
initial
begin
	RegDstD2_expected[3] = 1'bX;
end 
// expected RegDstD2[ 2 ]
initial
begin
	RegDstD2_expected[2] = 1'bX;
end 
// expected RegDstD2[ 1 ]
initial
begin
	RegDstD2_expected[1] = 1'bX;
end 
// expected RegDstD2[ 0 ]
initial
begin
	RegDstD2_expected[0] = 1'bX;
end 
// generate trigger
always @(BranchOut_expected or BranchOut or DataMemOut_expected or DataMemOut or InstructionOut_expected or InstructionOut or MemWriteOut_expected or MemWriteOut or MuxOut_expected or MuxOut or Operation_expected or Operation or RegDstD1_expected or RegDstD1 or RegDstD2_expected or RegDstD2 or RegWriteOut_expected or RegWriteOut or WriteRegAdd_expected or WriteRegAdd or ZeroOut_expected or ZeroOut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected BranchOut = %b | expected DataMemOut = %b | expected InstructionOut = %b | expected MemWriteOut = %b | expected MuxOut = %b | expected Operation = %b | expected RegDstD1 = %b | expected RegDstD2 = %b | expected RegWriteOut = %b | expected WriteRegAdd = %b | expected ZeroOut = %b | ",BranchOut_expected_prev,DataMemOut_expected_prev,InstructionOut_expected_prev,MemWriteOut_expected_prev,MuxOut_expected_prev,Operation_expected_prev,RegDstD1_expected_prev,RegDstD2_expected_prev,RegWriteOut_expected_prev,WriteRegAdd_expected_prev,ZeroOut_expected_prev);
	$display("| real BranchOut = %b | real DataMemOut = %b | real InstructionOut = %b | real MemWriteOut = %b | real MuxOut = %b | real Operation = %b | real RegDstD1 = %b | real RegDstD2 = %b | real RegWriteOut = %b | real WriteRegAdd = %b | real ZeroOut = %b | ",BranchOut_prev,DataMemOut_prev,InstructionOut_prev,MemWriteOut_prev,MuxOut_prev,Operation_prev,RegDstD1_prev,RegDstD2_prev,RegWriteOut_prev,WriteRegAdd_prev,ZeroOut_prev);
`endif
	if (
		( BranchOut_expected_prev !== 1'bx ) && ( BranchOut_prev !== BranchOut_expected_prev )
		&& ((BranchOut_expected_prev !== last_BranchOut_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BranchOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BranchOut_expected_prev);
		$display ("     Real value = %b", BranchOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BranchOut_exp = BranchOut_expected_prev;
	end
	if (
		( DataMemOut_expected_prev[0] !== 1'bx ) && ( DataMemOut_prev[0] !== DataMemOut_expected_prev[0] )
		&& ((DataMemOut_expected_prev[0] !== last_DataMemOut_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataMemOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataMemOut_expected_prev);
		$display ("     Real value = %b", DataMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DataMemOut_exp[0] = DataMemOut_expected_prev[0];
	end
	if (
		( DataMemOut_expected_prev[1] !== 1'bx ) && ( DataMemOut_prev[1] !== DataMemOut_expected_prev[1] )
		&& ((DataMemOut_expected_prev[1] !== last_DataMemOut_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataMemOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataMemOut_expected_prev);
		$display ("     Real value = %b", DataMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DataMemOut_exp[1] = DataMemOut_expected_prev[1];
	end
	if (
		( DataMemOut_expected_prev[2] !== 1'bx ) && ( DataMemOut_prev[2] !== DataMemOut_expected_prev[2] )
		&& ((DataMemOut_expected_prev[2] !== last_DataMemOut_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataMemOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataMemOut_expected_prev);
		$display ("     Real value = %b", DataMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DataMemOut_exp[2] = DataMemOut_expected_prev[2];
	end
	if (
		( DataMemOut_expected_prev[3] !== 1'bx ) && ( DataMemOut_prev[3] !== DataMemOut_expected_prev[3] )
		&& ((DataMemOut_expected_prev[3] !== last_DataMemOut_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataMemOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataMemOut_expected_prev);
		$display ("     Real value = %b", DataMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DataMemOut_exp[3] = DataMemOut_expected_prev[3];
	end
	if (
		( DataMemOut_expected_prev[4] !== 1'bx ) && ( DataMemOut_prev[4] !== DataMemOut_expected_prev[4] )
		&& ((DataMemOut_expected_prev[4] !== last_DataMemOut_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataMemOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataMemOut_expected_prev);
		$display ("     Real value = %b", DataMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DataMemOut_exp[4] = DataMemOut_expected_prev[4];
	end
	if (
		( DataMemOut_expected_prev[5] !== 1'bx ) && ( DataMemOut_prev[5] !== DataMemOut_expected_prev[5] )
		&& ((DataMemOut_expected_prev[5] !== last_DataMemOut_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataMemOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataMemOut_expected_prev);
		$display ("     Real value = %b", DataMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DataMemOut_exp[5] = DataMemOut_expected_prev[5];
	end
	if (
		( DataMemOut_expected_prev[6] !== 1'bx ) && ( DataMemOut_prev[6] !== DataMemOut_expected_prev[6] )
		&& ((DataMemOut_expected_prev[6] !== last_DataMemOut_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataMemOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataMemOut_expected_prev);
		$display ("     Real value = %b", DataMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DataMemOut_exp[6] = DataMemOut_expected_prev[6];
	end
	if (
		( DataMemOut_expected_prev[7] !== 1'bx ) && ( DataMemOut_prev[7] !== DataMemOut_expected_prev[7] )
		&& ((DataMemOut_expected_prev[7] !== last_DataMemOut_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataMemOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataMemOut_expected_prev);
		$display ("     Real value = %b", DataMemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DataMemOut_exp[7] = DataMemOut_expected_prev[7];
	end
	if (
		( InstructionOut_expected_prev[0] !== 1'bx ) && ( InstructionOut_prev[0] !== InstructionOut_expected_prev[0] )
		&& ((InstructionOut_expected_prev[0] !== last_InstructionOut_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[0] = InstructionOut_expected_prev[0];
	end
	if (
		( InstructionOut_expected_prev[1] !== 1'bx ) && ( InstructionOut_prev[1] !== InstructionOut_expected_prev[1] )
		&& ((InstructionOut_expected_prev[1] !== last_InstructionOut_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[1] = InstructionOut_expected_prev[1];
	end
	if (
		( InstructionOut_expected_prev[2] !== 1'bx ) && ( InstructionOut_prev[2] !== InstructionOut_expected_prev[2] )
		&& ((InstructionOut_expected_prev[2] !== last_InstructionOut_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[2] = InstructionOut_expected_prev[2];
	end
	if (
		( InstructionOut_expected_prev[3] !== 1'bx ) && ( InstructionOut_prev[3] !== InstructionOut_expected_prev[3] )
		&& ((InstructionOut_expected_prev[3] !== last_InstructionOut_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[3] = InstructionOut_expected_prev[3];
	end
	if (
		( InstructionOut_expected_prev[4] !== 1'bx ) && ( InstructionOut_prev[4] !== InstructionOut_expected_prev[4] )
		&& ((InstructionOut_expected_prev[4] !== last_InstructionOut_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[4] = InstructionOut_expected_prev[4];
	end
	if (
		( InstructionOut_expected_prev[5] !== 1'bx ) && ( InstructionOut_prev[5] !== InstructionOut_expected_prev[5] )
		&& ((InstructionOut_expected_prev[5] !== last_InstructionOut_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[5] = InstructionOut_expected_prev[5];
	end
	if (
		( InstructionOut_expected_prev[6] !== 1'bx ) && ( InstructionOut_prev[6] !== InstructionOut_expected_prev[6] )
		&& ((InstructionOut_expected_prev[6] !== last_InstructionOut_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[6] = InstructionOut_expected_prev[6];
	end
	if (
		( InstructionOut_expected_prev[7] !== 1'bx ) && ( InstructionOut_prev[7] !== InstructionOut_expected_prev[7] )
		&& ((InstructionOut_expected_prev[7] !== last_InstructionOut_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[7] = InstructionOut_expected_prev[7];
	end
	if (
		( InstructionOut_expected_prev[8] !== 1'bx ) && ( InstructionOut_prev[8] !== InstructionOut_expected_prev[8] )
		&& ((InstructionOut_expected_prev[8] !== last_InstructionOut_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[8] = InstructionOut_expected_prev[8];
	end
	if (
		( InstructionOut_expected_prev[9] !== 1'bx ) && ( InstructionOut_prev[9] !== InstructionOut_expected_prev[9] )
		&& ((InstructionOut_expected_prev[9] !== last_InstructionOut_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[9] = InstructionOut_expected_prev[9];
	end
	if (
		( InstructionOut_expected_prev[10] !== 1'bx ) && ( InstructionOut_prev[10] !== InstructionOut_expected_prev[10] )
		&& ((InstructionOut_expected_prev[10] !== last_InstructionOut_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[10] = InstructionOut_expected_prev[10];
	end
	if (
		( InstructionOut_expected_prev[11] !== 1'bx ) && ( InstructionOut_prev[11] !== InstructionOut_expected_prev[11] )
		&& ((InstructionOut_expected_prev[11] !== last_InstructionOut_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[11] = InstructionOut_expected_prev[11];
	end
	if (
		( InstructionOut_expected_prev[12] !== 1'bx ) && ( InstructionOut_prev[12] !== InstructionOut_expected_prev[12] )
		&& ((InstructionOut_expected_prev[12] !== last_InstructionOut_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[12] = InstructionOut_expected_prev[12];
	end
	if (
		( InstructionOut_expected_prev[13] !== 1'bx ) && ( InstructionOut_prev[13] !== InstructionOut_expected_prev[13] )
		&& ((InstructionOut_expected_prev[13] !== last_InstructionOut_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[13] = InstructionOut_expected_prev[13];
	end
	if (
		( InstructionOut_expected_prev[14] !== 1'bx ) && ( InstructionOut_prev[14] !== InstructionOut_expected_prev[14] )
		&& ((InstructionOut_expected_prev[14] !== last_InstructionOut_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[14] = InstructionOut_expected_prev[14];
	end
	if (
		( InstructionOut_expected_prev[15] !== 1'bx ) && ( InstructionOut_prev[15] !== InstructionOut_expected_prev[15] )
		&& ((InstructionOut_expected_prev[15] !== last_InstructionOut_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[15] = InstructionOut_expected_prev[15];
	end
	if (
		( InstructionOut_expected_prev[16] !== 1'bx ) && ( InstructionOut_prev[16] !== InstructionOut_expected_prev[16] )
		&& ((InstructionOut_expected_prev[16] !== last_InstructionOut_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[16] = InstructionOut_expected_prev[16];
	end
	if (
		( InstructionOut_expected_prev[17] !== 1'bx ) && ( InstructionOut_prev[17] !== InstructionOut_expected_prev[17] )
		&& ((InstructionOut_expected_prev[17] !== last_InstructionOut_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[17] = InstructionOut_expected_prev[17];
	end
	if (
		( InstructionOut_expected_prev[18] !== 1'bx ) && ( InstructionOut_prev[18] !== InstructionOut_expected_prev[18] )
		&& ((InstructionOut_expected_prev[18] !== last_InstructionOut_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[18] = InstructionOut_expected_prev[18];
	end
	if (
		( InstructionOut_expected_prev[19] !== 1'bx ) && ( InstructionOut_prev[19] !== InstructionOut_expected_prev[19] )
		&& ((InstructionOut_expected_prev[19] !== last_InstructionOut_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[19] = InstructionOut_expected_prev[19];
	end
	if (
		( InstructionOut_expected_prev[20] !== 1'bx ) && ( InstructionOut_prev[20] !== InstructionOut_expected_prev[20] )
		&& ((InstructionOut_expected_prev[20] !== last_InstructionOut_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[20] = InstructionOut_expected_prev[20];
	end
	if (
		( InstructionOut_expected_prev[21] !== 1'bx ) && ( InstructionOut_prev[21] !== InstructionOut_expected_prev[21] )
		&& ((InstructionOut_expected_prev[21] !== last_InstructionOut_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[21] = InstructionOut_expected_prev[21];
	end
	if (
		( InstructionOut_expected_prev[22] !== 1'bx ) && ( InstructionOut_prev[22] !== InstructionOut_expected_prev[22] )
		&& ((InstructionOut_expected_prev[22] !== last_InstructionOut_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[22] = InstructionOut_expected_prev[22];
	end
	if (
		( InstructionOut_expected_prev[23] !== 1'bx ) && ( InstructionOut_prev[23] !== InstructionOut_expected_prev[23] )
		&& ((InstructionOut_expected_prev[23] !== last_InstructionOut_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[23] = InstructionOut_expected_prev[23];
	end
	if (
		( InstructionOut_expected_prev[24] !== 1'bx ) && ( InstructionOut_prev[24] !== InstructionOut_expected_prev[24] )
		&& ((InstructionOut_expected_prev[24] !== last_InstructionOut_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[24] = InstructionOut_expected_prev[24];
	end
	if (
		( InstructionOut_expected_prev[25] !== 1'bx ) && ( InstructionOut_prev[25] !== InstructionOut_expected_prev[25] )
		&& ((InstructionOut_expected_prev[25] !== last_InstructionOut_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[25] = InstructionOut_expected_prev[25];
	end
	if (
		( InstructionOut_expected_prev[26] !== 1'bx ) && ( InstructionOut_prev[26] !== InstructionOut_expected_prev[26] )
		&& ((InstructionOut_expected_prev[26] !== last_InstructionOut_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[26] = InstructionOut_expected_prev[26];
	end
	if (
		( InstructionOut_expected_prev[27] !== 1'bx ) && ( InstructionOut_prev[27] !== InstructionOut_expected_prev[27] )
		&& ((InstructionOut_expected_prev[27] !== last_InstructionOut_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[27] = InstructionOut_expected_prev[27];
	end
	if (
		( InstructionOut_expected_prev[28] !== 1'bx ) && ( InstructionOut_prev[28] !== InstructionOut_expected_prev[28] )
		&& ((InstructionOut_expected_prev[28] !== last_InstructionOut_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[28] = InstructionOut_expected_prev[28];
	end
	if (
		( InstructionOut_expected_prev[29] !== 1'bx ) && ( InstructionOut_prev[29] !== InstructionOut_expected_prev[29] )
		&& ((InstructionOut_expected_prev[29] !== last_InstructionOut_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[29] = InstructionOut_expected_prev[29];
	end
	if (
		( InstructionOut_expected_prev[30] !== 1'bx ) && ( InstructionOut_prev[30] !== InstructionOut_expected_prev[30] )
		&& ((InstructionOut_expected_prev[30] !== last_InstructionOut_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[30] = InstructionOut_expected_prev[30];
	end
	if (
		( InstructionOut_expected_prev[31] !== 1'bx ) && ( InstructionOut_prev[31] !== InstructionOut_expected_prev[31] )
		&& ((InstructionOut_expected_prev[31] !== last_InstructionOut_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionOut[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionOut_expected_prev);
		$display ("     Real value = %b", InstructionOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InstructionOut_exp[31] = InstructionOut_expected_prev[31];
	end
	if (
		( MemWriteOut_expected_prev !== 1'bx ) && ( MemWriteOut_prev !== MemWriteOut_expected_prev )
		&& ((MemWriteOut_expected_prev !== last_MemWriteOut_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemWriteOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemWriteOut_expected_prev);
		$display ("     Real value = %b", MemWriteOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MemWriteOut_exp = MemWriteOut_expected_prev;
	end
	if (
		( MuxOut_expected_prev[0] !== 1'bx ) && ( MuxOut_prev[0] !== MuxOut_expected_prev[0] )
		&& ((MuxOut_expected_prev[0] !== last_MuxOut_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MuxOut_exp[0] = MuxOut_expected_prev[0];
	end
	if (
		( MuxOut_expected_prev[1] !== 1'bx ) && ( MuxOut_prev[1] !== MuxOut_expected_prev[1] )
		&& ((MuxOut_expected_prev[1] !== last_MuxOut_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MuxOut_exp[1] = MuxOut_expected_prev[1];
	end
	if (
		( MuxOut_expected_prev[2] !== 1'bx ) && ( MuxOut_prev[2] !== MuxOut_expected_prev[2] )
		&& ((MuxOut_expected_prev[2] !== last_MuxOut_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MuxOut_exp[2] = MuxOut_expected_prev[2];
	end
	if (
		( MuxOut_expected_prev[3] !== 1'bx ) && ( MuxOut_prev[3] !== MuxOut_expected_prev[3] )
		&& ((MuxOut_expected_prev[3] !== last_MuxOut_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MuxOut_exp[3] = MuxOut_expected_prev[3];
	end
	if (
		( MuxOut_expected_prev[4] !== 1'bx ) && ( MuxOut_prev[4] !== MuxOut_expected_prev[4] )
		&& ((MuxOut_expected_prev[4] !== last_MuxOut_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MuxOut_exp[4] = MuxOut_expected_prev[4];
	end
	if (
		( MuxOut_expected_prev[5] !== 1'bx ) && ( MuxOut_prev[5] !== MuxOut_expected_prev[5] )
		&& ((MuxOut_expected_prev[5] !== last_MuxOut_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MuxOut_exp[5] = MuxOut_expected_prev[5];
	end
	if (
		( MuxOut_expected_prev[6] !== 1'bx ) && ( MuxOut_prev[6] !== MuxOut_expected_prev[6] )
		&& ((MuxOut_expected_prev[6] !== last_MuxOut_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MuxOut_exp[6] = MuxOut_expected_prev[6];
	end
	if (
		( MuxOut_expected_prev[7] !== 1'bx ) && ( MuxOut_prev[7] !== MuxOut_expected_prev[7] )
		&& ((MuxOut_expected_prev[7] !== last_MuxOut_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MuxOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MuxOut_expected_prev);
		$display ("     Real value = %b", MuxOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MuxOut_exp[7] = MuxOut_expected_prev[7];
	end
	if (
		( Operation_expected_prev[0] !== 1'bx ) && ( Operation_prev[0] !== Operation_expected_prev[0] )
		&& ((Operation_expected_prev[0] !== last_Operation_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operation[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operation_expected_prev);
		$display ("     Real value = %b", Operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Operation_exp[0] = Operation_expected_prev[0];
	end
	if (
		( Operation_expected_prev[1] !== 1'bx ) && ( Operation_prev[1] !== Operation_expected_prev[1] )
		&& ((Operation_expected_prev[1] !== last_Operation_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operation[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operation_expected_prev);
		$display ("     Real value = %b", Operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Operation_exp[1] = Operation_expected_prev[1];
	end
	if (
		( Operation_expected_prev[2] !== 1'bx ) && ( Operation_prev[2] !== Operation_expected_prev[2] )
		&& ((Operation_expected_prev[2] !== last_Operation_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Operation[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Operation_expected_prev);
		$display ("     Real value = %b", Operation_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Operation_exp[2] = Operation_expected_prev[2];
	end
	if (
		( RegDstD1_expected_prev[0] !== 1'bx ) && ( RegDstD1_prev[0] !== RegDstD1_expected_prev[0] )
		&& ((RegDstD1_expected_prev[0] !== last_RegDstD1_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDstD1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDstD1_expected_prev);
		$display ("     Real value = %b", RegDstD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RegDstD1_exp[0] = RegDstD1_expected_prev[0];
	end
	if (
		( RegDstD1_expected_prev[1] !== 1'bx ) && ( RegDstD1_prev[1] !== RegDstD1_expected_prev[1] )
		&& ((RegDstD1_expected_prev[1] !== last_RegDstD1_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDstD1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDstD1_expected_prev);
		$display ("     Real value = %b", RegDstD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RegDstD1_exp[1] = RegDstD1_expected_prev[1];
	end
	if (
		( RegDstD1_expected_prev[2] !== 1'bx ) && ( RegDstD1_prev[2] !== RegDstD1_expected_prev[2] )
		&& ((RegDstD1_expected_prev[2] !== last_RegDstD1_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDstD1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDstD1_expected_prev);
		$display ("     Real value = %b", RegDstD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RegDstD1_exp[2] = RegDstD1_expected_prev[2];
	end
	if (
		( RegDstD1_expected_prev[3] !== 1'bx ) && ( RegDstD1_prev[3] !== RegDstD1_expected_prev[3] )
		&& ((RegDstD1_expected_prev[3] !== last_RegDstD1_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDstD1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDstD1_expected_prev);
		$display ("     Real value = %b", RegDstD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RegDstD1_exp[3] = RegDstD1_expected_prev[3];
	end
	if (
		( RegDstD1_expected_prev[4] !== 1'bx ) && ( RegDstD1_prev[4] !== RegDstD1_expected_prev[4] )
		&& ((RegDstD1_expected_prev[4] !== last_RegDstD1_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDstD1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDstD1_expected_prev);
		$display ("     Real value = %b", RegDstD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RegDstD1_exp[4] = RegDstD1_expected_prev[4];
	end
	if (
		( RegDstD1_expected_prev[5] !== 1'bx ) && ( RegDstD1_prev[5] !== RegDstD1_expected_prev[5] )
		&& ((RegDstD1_expected_prev[5] !== last_RegDstD1_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDstD1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDstD1_expected_prev);
		$display ("     Real value = %b", RegDstD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RegDstD1_exp[5] = RegDstD1_expected_prev[5];
	end
	if (
		( RegDstD1_expected_prev[6] !== 1'bx ) && ( RegDstD1_prev[6] !== RegDstD1_expected_prev[6] )
		&& ((RegDstD1_expected_prev[6] !== last_RegDstD1_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDstD1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDstD1_expected_prev);
		$display ("     Real value = %b", RegDstD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RegDstD1_exp[6] = RegDstD1_expected_prev[6];
	end
	if (
		( RegDstD1_expected_prev[7] !== 1'bx ) && ( RegDstD1_prev[7] !== RegDstD1_expected_prev[7] )
		&& ((RegDstD1_expected_prev[7] !== last_RegDstD1_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDstD1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDstD1_expected_prev);
		$display ("     Real value = %b", RegDstD1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RegDstD1_exp[7] = RegDstD1_expected_prev[7];
	end
	if (
		( RegDstD2_expected_prev[0] !== 1'bx ) && ( RegDstD2_prev[0] !== RegDstD2_expected_prev[0] )
		&& ((RegDstD2_expected_prev[0] !== last_RegDstD2_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDstD2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDstD2_expected_prev);
		$display ("     Real value = %b", RegDstD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDstD2_exp[0] = RegDstD2_expected_prev[0];
	end
	if (
		( RegDstD2_expected_prev[1] !== 1'bx ) && ( RegDstD2_prev[1] !== RegDstD2_expected_prev[1] )
		&& ((RegDstD2_expected_prev[1] !== last_RegDstD2_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDstD2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDstD2_expected_prev);
		$display ("     Real value = %b", RegDstD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDstD2_exp[1] = RegDstD2_expected_prev[1];
	end
	if (
		( RegDstD2_expected_prev[2] !== 1'bx ) && ( RegDstD2_prev[2] !== RegDstD2_expected_prev[2] )
		&& ((RegDstD2_expected_prev[2] !== last_RegDstD2_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDstD2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDstD2_expected_prev);
		$display ("     Real value = %b", RegDstD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDstD2_exp[2] = RegDstD2_expected_prev[2];
	end
	if (
		( RegDstD2_expected_prev[3] !== 1'bx ) && ( RegDstD2_prev[3] !== RegDstD2_expected_prev[3] )
		&& ((RegDstD2_expected_prev[3] !== last_RegDstD2_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDstD2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDstD2_expected_prev);
		$display ("     Real value = %b", RegDstD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDstD2_exp[3] = RegDstD2_expected_prev[3];
	end
	if (
		( RegDstD2_expected_prev[4] !== 1'bx ) && ( RegDstD2_prev[4] !== RegDstD2_expected_prev[4] )
		&& ((RegDstD2_expected_prev[4] !== last_RegDstD2_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDstD2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDstD2_expected_prev);
		$display ("     Real value = %b", RegDstD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDstD2_exp[4] = RegDstD2_expected_prev[4];
	end
	if (
		( RegDstD2_expected_prev[5] !== 1'bx ) && ( RegDstD2_prev[5] !== RegDstD2_expected_prev[5] )
		&& ((RegDstD2_expected_prev[5] !== last_RegDstD2_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDstD2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDstD2_expected_prev);
		$display ("     Real value = %b", RegDstD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDstD2_exp[5] = RegDstD2_expected_prev[5];
	end
	if (
		( RegDstD2_expected_prev[6] !== 1'bx ) && ( RegDstD2_prev[6] !== RegDstD2_expected_prev[6] )
		&& ((RegDstD2_expected_prev[6] !== last_RegDstD2_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDstD2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDstD2_expected_prev);
		$display ("     Real value = %b", RegDstD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDstD2_exp[6] = RegDstD2_expected_prev[6];
	end
	if (
		( RegDstD2_expected_prev[7] !== 1'bx ) && ( RegDstD2_prev[7] !== RegDstD2_expected_prev[7] )
		&& ((RegDstD2_expected_prev[7] !== last_RegDstD2_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDstD2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDstD2_expected_prev);
		$display ("     Real value = %b", RegDstD2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RegDstD2_exp[7] = RegDstD2_expected_prev[7];
	end
	if (
		( RegWriteOut_expected_prev !== 1'bx ) && ( RegWriteOut_prev !== RegWriteOut_expected_prev )
		&& ((RegWriteOut_expected_prev !== last_RegWriteOut_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegWriteOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegWriteOut_expected_prev);
		$display ("     Real value = %b", RegWriteOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RegWriteOut_exp = RegWriteOut_expected_prev;
	end
	if (
		( WriteRegAdd_expected_prev[0] !== 1'bx ) && ( WriteRegAdd_prev[0] !== WriteRegAdd_expected_prev[0] )
		&& ((WriteRegAdd_expected_prev[0] !== last_WriteRegAdd_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteRegAdd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteRegAdd_expected_prev);
		$display ("     Real value = %b", WriteRegAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_WriteRegAdd_exp[0] = WriteRegAdd_expected_prev[0];
	end
	if (
		( WriteRegAdd_expected_prev[1] !== 1'bx ) && ( WriteRegAdd_prev[1] !== WriteRegAdd_expected_prev[1] )
		&& ((WriteRegAdd_expected_prev[1] !== last_WriteRegAdd_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteRegAdd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteRegAdd_expected_prev);
		$display ("     Real value = %b", WriteRegAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_WriteRegAdd_exp[1] = WriteRegAdd_expected_prev[1];
	end
	if (
		( WriteRegAdd_expected_prev[2] !== 1'bx ) && ( WriteRegAdd_prev[2] !== WriteRegAdd_expected_prev[2] )
		&& ((WriteRegAdd_expected_prev[2] !== last_WriteRegAdd_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteRegAdd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteRegAdd_expected_prev);
		$display ("     Real value = %b", WriteRegAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_WriteRegAdd_exp[2] = WriteRegAdd_expected_prev[2];
	end
	if (
		( WriteRegAdd_expected_prev[3] !== 1'bx ) && ( WriteRegAdd_prev[3] !== WriteRegAdd_expected_prev[3] )
		&& ((WriteRegAdd_expected_prev[3] !== last_WriteRegAdd_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteRegAdd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteRegAdd_expected_prev);
		$display ("     Real value = %b", WriteRegAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_WriteRegAdd_exp[3] = WriteRegAdd_expected_prev[3];
	end
	if (
		( WriteRegAdd_expected_prev[4] !== 1'bx ) && ( WriteRegAdd_prev[4] !== WriteRegAdd_expected_prev[4] )
		&& ((WriteRegAdd_expected_prev[4] !== last_WriteRegAdd_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteRegAdd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteRegAdd_expected_prev);
		$display ("     Real value = %b", WriteRegAdd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_WriteRegAdd_exp[4] = WriteRegAdd_expected_prev[4];
	end
	if (
		( ZeroOut_expected_prev !== 1'bx ) && ( ZeroOut_prev !== ZeroOut_expected_prev )
		&& ((ZeroOut_expected_prev !== last_ZeroOut_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ZeroOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ZeroOut_expected_prev);
		$display ("     Real value = %b", ZeroOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ZeroOut_exp = ZeroOut_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module singleCycleProc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg GClock;
reg GReset;
reg [2:0] ValueSelect;
// wires                                               
wire BranchOut;
wire [7:0] DataMemOut;
wire [31:0] InstructionOut;
wire MemWriteOut;
wire [7:0] MuxOut;
wire [2:0] Operation;
wire [7:0] RegDstD1;
wire [7:0] RegDstD2;
wire RegWriteOut;
wire [4:0] WriteRegAdd;
wire ZeroOut;

wire sampler;                             

// assign statements (if any)                          
singleCycleProc i1 (
// port map - connection between master ports and signals/registers   
	.BranchOut(BranchOut),
	.DataMemOut(DataMemOut),
	.GClock(GClock),
	.GReset(GReset),
	.InstructionOut(InstructionOut),
	.MemWriteOut(MemWriteOut),
	.MuxOut(MuxOut),
	.Operation(Operation),
	.RegDstD1(RegDstD1),
	.RegDstD2(RegDstD2),
	.RegWriteOut(RegWriteOut),
	.ValueSelect(ValueSelect),
	.WriteRegAdd(WriteRegAdd),
	.ZeroOut(ZeroOut)
);

// GClock
initial
begin
	repeat(12)
	begin
		GClock = 1'b0;
		GClock = #40000 1'b1;
		# 40000;
	end
	GClock = 1'b0;
end 

// GReset
initial
begin
	GReset = 1'b0;
	GReset = #20000 1'b1;
end 
// ValueSelect[ 2 ]
initial
begin
	ValueSelect[2] = 1'b0;
	ValueSelect[2] = #80000 1'b1;
	ValueSelect[2] = #560000 1'b0;
	ValueSelect[2] = #320000 1'b1;
end 
// ValueSelect[ 1 ]
initial
begin
	ValueSelect[1] = 1'b0;
	ValueSelect[1] = #480000 1'b1;
	ValueSelect[1] = #160000 1'b0;
	ValueSelect[1] = #160000 1'b1;
	ValueSelect[1] = #160000 1'b0;
end 
// ValueSelect[ 0 ]
initial
begin
	ValueSelect[0] = 1'b0;
	ValueSelect[0] = #400000 1'b1;
	# 80000;
	repeat(3)
	begin
		ValueSelect[0] = 1'b0;
		ValueSelect[0] = #80000 1'b1;
		# 80000;
	end
	ValueSelect[0] = 1'b0;
end 

singleCycleProc_vlg_sample_tst tb_sample (
	.GClock(GClock),
	.GReset(GReset),
	.ValueSelect(ValueSelect),
	.sampler_tx(sampler)
);

singleCycleProc_vlg_check_tst tb_out(
	.BranchOut(BranchOut),
	.DataMemOut(DataMemOut),
	.InstructionOut(InstructionOut),
	.MemWriteOut(MemWriteOut),
	.MuxOut(MuxOut),
	.Operation(Operation),
	.RegDstD1(RegDstD1),
	.RegDstD2(RegDstD2),
	.RegWriteOut(RegWriteOut),
	.WriteRegAdd(WriteRegAdd),
	.ZeroOut(ZeroOut),
	.sampler_rx(sampler)
);
endmodule

